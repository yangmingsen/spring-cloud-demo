server:
  port: 9080

spring:
  application:
    name: consumer # 应用名称
eureka:
  client:
    service-url: # EurekaServer地址
      defaultZone: http://127.0.0.1:10086/eureka
    fetch-registry: true #，如果为true，则会从Eureka Server服务的列表只读备份，然后缓存在本地
    registry-fetch-interval-seconds: 5 #`每隔5秒`会重新获取并更新数据
  instance:
    prefer-ip-address: true # 当其它服务获取地址时提供ip而不是hostname
    ip-address: 127.0.0.1 # 指定自己的ip信息，不指定的话会自己寻找


user-service:
  ribbon: # 通过`ribbon.xx`来进行全局配置
    ConnectTimeout: 250 # 连接超时时间(ms)
    ReadTimeout: 1000 # 通信超时时间(ms)
    OkToRetryOnAllOperations: true # 是否对所有操作重试
    MaxAutoRetriesNextServer: 1 # 同一服务不同实例的重试次数
    MaxAutoRetries: 1 # 同一实例的重试次数

hystrix:
  command:
    default:
      execution:
        isolation:
          thread:
            timeoutInMillisecond: 1500 # 设置hystrix的超时时间为6000ms

#Feign默认也有对Hystix的集成,只不过，默认情况下是关闭的。我们需要通过下面的参数来开启：
feign:
  hystrix:
    enabled: true # 开启Feign的熔断功能

  #Spring Cloud Feign 支持对请求和响应进行GZIP压缩，以减少通信过程中的性能损耗。通过下面的参数即可开启请求与响应的压缩功能：
  compression:
    request:
      enabled: true # 开启请求压缩
    response:
      enabled: true # 开启响应压缩

#通过`logging.level.xx=debug`来设置日志级别。然而这个对Fegin客户端而言不会产生效果。
#  因为`@FeignClient`注解修改的客户端在被代理时，都会创建一个新的Fegin.Logger实例。我们需要额外指定这个日志的级别才可以。
logging:
  level:
    top.yms.consumer: debug